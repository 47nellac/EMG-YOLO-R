# EMG-YOLO-I: Intermediate version of EMG-YOLO
# Based on YOLOv8n + YOLOv11/12n

# Ultralytics ðŸš€ AGPL-3.0 License - https://ultralytics.com/license

# Ultralytics YOLOv8 object detection model with P3/8 - P5/32 outputs
# Model docs: https://docs.ultralytics.com/models/yolov8
# Task docs: https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 80 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.33, 0.25, 1024] # YOLOv8n summary: 129 layers, 3157200 parameters, 3157184 gradients, 8.9 GFLOPS
  s: [0.33, 0.50, 1024] # YOLOv8s summary: 129 layers, 11166560 parameters, 11166544 gradients, 28.8 GFLOPS
  m: [0.67, 0.75, 768] # YOLOv8m summary: 169 layers, 25902640 parameters, 25902624 gradients, 79.3 GFLOPS
  l: [1.00, 1.00, 512] # YOLOv8l summary: 209 layers, 43691520 parameters, 43691504 gradients, 165.7 GFLOPS
  x: [1.00, 1.25, 512] # YOLOv8x summary: 209 layers, 68229648 parameters, 68229632 gradients, 258.5 GFLOPS

# EMG-YOLO-R backbone
backbone:
  # [from, repeats, module, args]						Resulting image resolution (input is 640x640)
  - [-1, 1, Conv, [64, 3, 2]] # 0-P1/2       				  	-> 320x320
  - [-1, 1, Conv, [128, 3, 2]] # 1-P2/4      		 		 	-> 160x160
  - [-1, 2, C3k2, [256, True, 0.25]] #2        				 	-> 80x80 * Change from emg-yolo-r
  - [-1, 1, Conv, [256, 3, 2]] # 3-P3/8          				-> 80x80
  - [-1, 4, A2C2f, [256, True, 4]] # 4  # Changed C2F-EMCM to   A2C2f		-> 80x80 * Change from emg-yolo-m
  - [-1, 1, Conv, [512, 3, 2]] # 5-P4/16					-> 40x40
  - [-1, 4, A2C2f, [512, True, 4]] # 6 # Changed C2F to C2F-EMCM to A2C2f	-> 40x40 * Change from emg-yolo-m
  - [-1, 1, Conv, [1024, 3, 2]] # 7-P5/32					-> 20x20
  - [-1, 4, A2C2f, [1024, True, 4]] # 8 # Changed C2F to C2F-EMCM to A2C2f	-> 20x20 * Change from emg-yolo-m
  - [-1, 1, SPPF, [1024, 5]] # 9						-> 20x20
  - [-1, 1, MAM, [512]] # 10     # new last piece of the backbone		-> 40x40

# EMG-YOLO-R head
head:
  - [-1, 1, Conv, [1024, 1]] # 11						-> 20x20 # This one is a 1x1 conv because it seems to need to be that
  - [6, 1, Conv, [1024, 3, 2]] # 12						-> 20x20
  - [[-1, 11], 1, Concat, [1]] # 13						-> 20x20
  - [-1, 3, CSPStage, [1024]] #14						-> 20x20
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #15				-> 40x40


  - [4, 1, Conv, [512, 3, 2]] # 16						-> 40x40
  - [[-1, 6, 15], 1, Concat, [1]] #17						-> 40x40
  - [-1, 3, CSPStage, [512]] # 18						-> 40x40
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] #19				-> 80x80
  - [[-1, 4], 1, Concat, [1]] #20						-> 80x80

  - [-1, 3, CSPStage, [256]] #21 # 80x80 prediction				-> 80x80
  
  - [-1, 1, Conv, [512, 3, 2]] #22						-> 40x40
  - [[-1, 18], 1, Concat, [1]] #23						-> 40x40	
  - [-1, 3, CSPStage, [512]] #24  # 40x40 prediction				-> 40x40
  
  - [-1, 1, Conv, [1024, 3, 2]] #25						-> 20x20				
  - [18, 1, Conv, [1024, 3, 2]] #26						-> 20x20
  - [[-1, 14, 25], 1, Concat, [1]] #27						-> 20x20
  - [-1, 3, CSPStage, [1024]] #28  # 20x20 prediction				-> 20x20
  
  - [[21, 24, 28], 1, Detect, [nc]] # Detect					Predicts on the 80x80, 40x40, and 20x20 outputs
